"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å Financial Times —Å–∫—Ä–∞–ø–µ—Ä–∞ —Å FastAPI
"""
import asyncio
import uvicorn
from loguru import logger
from dotenv import load_dotenv

from app.scheduler.scheduler import ScrapingScheduler
from app.db.database import init_db, close_db
from app.api.app import app as fastapi_app

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

from pathlib import Path

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
log_dir = Path("logs")
log_dir.mkdir(exist_ok=True)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
log_file = log_dir / "scraper.log"

logger.add(
    str(log_file),
    rotation="100 MB",
    retention="30 days",
    level="INFO",
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {name}:{function}:{line} | {message}"
)


async def run_scheduler():
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞"""
    try:
        logger.info("‚è∞ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
        scheduler = ScrapingScheduler()
        await scheduler.start()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        raise


async def run_fastapi():
    """–ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        logger.info("üåê –ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞...")
        config = uvicorn.Config(
            app=fastapi_app,
            host="0.0.0.0",
            port=8000,
            log_level="info",
            access_log=True
        )
        server = uvicorn.Server(config)
        await server.serve()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ FastAPI —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        raise


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Financial Times —Å–∫—Ä–∞–ø–µ—Ä–∞ —Å FastAPI...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        logger.info("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        await init_db()
        
        logger.info("üî• –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ...")
        
        # –ó–∞–ø—É—Å–∫ FastAPI –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        await asyncio.gather(
            run_fastapi(),
            run_scheduler(),
            return_exceptions=True
        )
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        logger.info("üîå –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        await close_db()
        logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    asyncio.run(main())