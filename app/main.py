"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å Financial Times —Å–∫—Ä–∞–ø–µ—Ä–∞
"""
import asyncio
import os
from loguru import logger
from dotenv import load_dotenv

from app.scheduler.scheduler import ScrapingScheduler

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.add(
    "/app/logs/scraper.log",
    rotation="100 MB",
    retention="30 days",
    level="INFO",
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {name}:{function}:{line} | {message}"
)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = None

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∞–ø–µ—Ä–∞"""
    global scheduler

    logger.info("üöÄ Starting Financial Times Scraper")
    logger.info("üìä Database URL: {}", os.getenv("DATABASE_URL", "Not configured"))
    logger.info("‚è∞ Scraper interval: {} hours", os.getenv("SCRAPER_INTERVAL_HOURS", "1"))
    logger.info("üìÖ Initial days back: {}", os.getenv("INITIAL_DAYS_BACK", "30"))


    try:
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler = ScrapingScheduler()
        await scheduler.start()

    except KeyboardInterrupt:
        logger.info("üëã Graceful shutdown completed")
    except Exception as e:
        logger.error(f"‚ùå Critical error: {str(e)}")
        raise


if __name__ == "__main__":
    logger.info("üéØ Application starting...")
    asyncio.run(main())