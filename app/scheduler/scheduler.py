"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ Financial Times
"""
import asyncio
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from loguru import logger

from app.scraper.scraper import FTScraper


class ScrapingScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""

    def __init__(self):
        self.scheduler = AsyncIOScheduler()
        self.scraper = FTScraper()

    async def initial_scrape_job(self):
        """–ó–∞–¥–∞—á–∞ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ (30 –¥–Ω–µ–π)"""
        try:
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞...")
            await self.scraper.run_initial_scraping()
            logger.info("‚úÖ –ó–∞–¥–∞—á–∞ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞: {e}")

    async def hourly_scrape_job(self):
        """–ó–∞–¥–∞—á–∞ –ø–æ—á–∞—Å–æ–≤–æ–≥–æ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞"""
        try:
            logger.info("‚è∞ –ó–∞–ø—É—Å–∫ –ø–æ—á–∞—Å–æ–≤–æ–π –∑–∞–¥–∞—á–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞...")
            await self.scraper.run_hourly_scraping()
            logger.info("‚úÖ –ü–æ—á–∞—Å–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—á–∞—Å–æ–≤–æ–π –∑–∞–¥–∞—á–µ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞: {e}")

    async def adaptive_scrape_job(self):
        """–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–∂–∏–º)"""
        try:
            logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞...")
            await self.scraper.run_scraping()
            logger.info("‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–µ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞: {e}")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            logger.info("‚ö° –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–≤—ã–π –ª–∏ —ç—Ç–æ –∑–∞–ø—É—Å–∫
            is_first = await self.scraper.is_first_run()

            if is_first:
                logger.info("üÜï –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –Ω–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –∑–∞ 30 –¥–Ω–µ–π...")
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π —Å–∫—Ä–∞–ø–∏–Ω–≥
                await self.initial_scrape_job()

                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ—á–∞—Å–æ–≤–æ–π —Ä–µ–∂–∏–º –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤
                logger.info("‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—á–∞—Å–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤...")
                self.scheduler.add_job(
                    self.hourly_scrape_job,
                    trigger=IntervalTrigger(hours=1),
                    id='hourly_scraping_job',
                    name='FT Hourly Scraping',
                    replace_existing=True
                )

                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
                self.scheduler.start()
                logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω –≤ –ø–æ—á–∞—Å–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (–∫–∞–∂–¥—ã–π —á–∞—Å)")

            else:
                logger.info("üîÑ –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º...")
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Å–∫—Ä–∞–ø–∏–Ω–≥ —Å—Ä–∞–∑—É
                await self.adaptive_scrape_job()

                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ—á–∞—Å–æ–≤–æ–π —Ä–µ–∂–∏–º
                self.scheduler.add_job(
                    self.hourly_scrape_job,
                    trigger=IntervalTrigger(hours=1),
                    id='hourly_scraping_job',
                    name='FT Hourly Scraping',
                    replace_existing=True
                )

                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
                self.scheduler.start()
                logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω –≤ –ø–æ—á–∞—Å–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (–∫–∞–∂–¥—ã–π —á–∞—Å)")

            # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            while True:
                await asyncio.sleep(1)

        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
            await self.stop()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            await self.stop()

    async def start_manual_mode(self):
        """–ó–∞–ø—É—Å–∫ –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –±–µ–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            logger.info("üîß –ó–∞–ø—É—Å–∫ –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ...")
            await self.adaptive_scrape_job()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: {e}")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
            if self.scheduler.running:
                self.scheduler.shutdown()
            logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
